{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class Player(object):\n",
    "    def __init__(self, bankroll = 100, hand = []):\n",
    "        self.bankroll = bankroll\n",
    "        self.hand = hand\n",
    "        \n",
    "    def add_bankroll(self, number):\n",
    "        self.bankroll += number\n",
    "    def minus_bankroll(self, difference):\n",
    "        self.bankroll -= difference\n",
    "    def get_bankroll(self):\n",
    "        return self.bankroll\n",
    "    def hit(self, card_hit):\n",
    "        self.hand.append(card_hit)\n",
    "    def get_hand(self):\n",
    "        return self.hand\n",
    "    def wipe_hand(self):\n",
    "        self.hand = []\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class Dealer(Player):\n",
    "    def __init__ (self, bankroll = 10000, hand = []):\n",
    "        self.bankroll = bankroll\n",
    "        self.hand = hand\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class Pot(object):\n",
    "    def __init__(self, amount = 0):\n",
    "        self.amount = amount\n",
    "        \n",
    "    def add_to(self, to_add):\n",
    "        self.amount += to_add\n",
    "    def empty(self):\n",
    "        self.amount = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "class Deck(object):\n",
    "    def __init__(self, cards = range(52), clubs = range(13), spades = range(13), hearts = range(13), diamonds = range(13)):\n",
    "        self.cards = cards\n",
    "        self.clubs = self.cards[0:13]\n",
    "        self.spades = self.cards[13:26]\n",
    "        self.hearts = self.cards[26:39]\n",
    "        self.diamonds = self.cards[39:52]\n",
    "        \n",
    "    def deal_one(self):\n",
    "        random.shuffle(self.cards)\n",
    "        card_dealt = self.cards.pop()\n",
    "        \n",
    "        if (card_dealt in self.clubs):\n",
    "            card = self.clubs.index(card_dealt)\n",
    "            self.clubs.pop(card)\n",
    "        elif (card_dealt in self.spades):\n",
    "            card = self.spades.index(card_dealt)\n",
    "            self.spades.pop(card)\n",
    "        elif (card_dealt in self.hearts):\n",
    "            card = self.hearts.index(card_dealt)\n",
    "            self.hearts.pop(card)\n",
    "        elif (card_dealt in self.diamonds):\n",
    "            card = self.diamonds.index(card_dealt)\n",
    "            self.diamonds.pop(card)\n",
    "    \n",
    "        return card_dealt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import copy\n",
    "def print_hand(hand): #hand is a list\n",
    "    to_print = copy.deepcopy(hand)\n",
    "    for i in xrange(len(to_print)):\n",
    "        suit = int(to_print[i]/13)\n",
    "        to_print[i] = to_print[i] % 13\n",
    "        to_print[i] += 1\n",
    "        if suit == 0:\n",
    "            if to_print[i] == 1:\n",
    "                print ('Ace of clubs')\n",
    "            elif to_print[i] == 11:\n",
    "                print ('Jack of clubs')\n",
    "            elif to_print[i] == 12:\n",
    "                print ('Queen of clubs')\n",
    "            elif to_print[i] == 13:\n",
    "                print'King of clubs'\n",
    "            else:\n",
    "                print(str(to_print[i]) + ' of clubs')\n",
    "        elif suit == 1:\n",
    "            if to_print[i] == 1:\n",
    "                print ('Ace of spades')\n",
    "            elif to_print[i] == 11:\n",
    "                print ('Jack of spades')\n",
    "            elif to_print[i] == 12:\n",
    "                print ('Queen of spades')\n",
    "            elif to_print[i] == 13:\n",
    "                print'King of spades'\n",
    "            else:    \n",
    "                print(str(to_print[i]) + ' of spades')\n",
    "        elif suit == 2:\n",
    "            if to_print[i] == 1:\n",
    "                print ('Ace of hearts')\n",
    "            elif to_print[i] == 11:\n",
    "                print ('Jack of hearts')\n",
    "            elif to_print[i] == 12:\n",
    "                print ('Queen of hearts')\n",
    "            elif to_print[i] == 13:\n",
    "                print'King of hearts'\n",
    "            else:\n",
    "                print(str(to_print[i]) + ' of hearts')\n",
    "        elif suit == 3:\n",
    "            if to_print[i] == 1:\n",
    "                print ('Ace of diamonds')\n",
    "            elif to_print[i] == 11:\n",
    "                print ('Jack of diamonds')\n",
    "            elif to_print[i] == 12:\n",
    "                print ('Queen of diamonds')\n",
    "            elif to_print[i] == 13:\n",
    "                print'King of diamonds'\n",
    "            else:\n",
    "                print(str(to_print[i]) + ' of diamonds')\n",
    "\n",
    "def value_hand(hand):\n",
    "    to_calculate = copy.deepcopy(hand)\n",
    "    for i in xrange(len(to_calculate)):\n",
    "        to_calculate[i] = to_calculate[i] % 13\n",
    "        if to_calculate[i] >= 10:\n",
    "            to_calculate[i] = 10\n",
    "        elif to_calculate[i] == 0:\n",
    "            to_calculate[i] = 11\n",
    "        else:\n",
    "            to_calculate[i] += 1\n",
    "    \n",
    "\n",
    "    for i in xrange(to_calculate.count(11)):\n",
    "        if sum(to_calculate) > 21 and 11 in to_calculate:\n",
    "            to_calculate[to_calculate.index(11)] = 1\n",
    "    return sum(to_calculate)\n",
    "\n",
    "#HERE'S A POT\n",
    "def move_money(player, pot):\n",
    "    player.add_bankroll(pot.amount)\n",
    "    pot.empty()\n",
    "    \n",
    "def dealer_turn(dealer, deck):\n",
    "    while value_hand(dealer.hand) < 17:\n",
    "        dealer.hit(deck.deal_one())\n",
    "\n",
    "\n",
    "def player_turn(player, dealer, deck, pot):\n",
    "    next_move = raw_input('Hit(h), stand(s), or raise(r)? ')\n",
    "    next_move = next_move.lower()\n",
    "    if next_move == 'h':\n",
    "        player.hit(deck.deal_one())\n",
    "        print('You have: ')\n",
    "        print_hand(player.hand)\n",
    "        if value_hand(player.hand) > 21:\n",
    "            print('You bust! You lose.')\n",
    "            return 0\n",
    "        else:\n",
    "            return 2\n",
    "    elif next_move == 's':\n",
    "        return 1\n",
    "    elif next_move == 'r':\n",
    "        to_raise = input('Amount to raise? ')\n",
    "        player.minus_bankroll(to_raise)\n",
    "        dealer.minus_bankroll(to_raise)\n",
    "        #HERE'S A POT!\n",
    "        pot.add_to(2 * to_raise)\n",
    "        print ('Pot is now ' + str(pot.amount) +'. Your bankroll is now ' + str(player.bankroll) + '.')\n",
    "        return 2\n",
    "    else: \n",
    "        print('Please input valid command. ')\n",
    "        return 2\n",
    "    \n",
    "def compare_hands(player, dealer, a_var):\n",
    "    if a_var == 0:\n",
    "        return 3\n",
    "    elif value_hand(dealer.hand) > 21:\n",
    "        print('Dealer bust. You win! ')\n",
    "        return 1\n",
    "    elif value_hand(dealer.hand) >= value_hand(player.hand) and a_var != 0:\n",
    "        print('You lose!')\n",
    "        return 2\n",
    "    elif value_hand(dealer.hand) < value_hand(player.hand) and a_var != 0:\n",
    "        print('You win! ')    \n",
    "        return 1\n",
    "    \n",
    "def reset_hands(player,dealer,deck):\n",
    "    player.wipe_hand()\n",
    "    dealer.wipe_hand()\n",
    "    del deck"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def play_game():\n",
    "    starting_amount = input('Starting bankroll? ')\n",
    "    player = Player(bankroll = starting_amount)\n",
    "    dealer = Dealer()\n",
    "    \n",
    "    while ( 1 < 6):\n",
    "        bet = input('Amount to bet? ')\n",
    "        # just for testing\n",
    "        if bet == -1:\n",
    "            break\n",
    "            \n",
    "        player.minus_bankroll(bet)\n",
    "        dealer.minus_bankroll(bet)\n",
    "        #Here's a pot!!!!\n",
    "        pot= Pot(amount = 2 * bet)\n",
    "        print('Pot is ' + str(pot.amount))\n",
    "        deck = Deck()\n",
    "        \n",
    "        for i in xrange(2):\n",
    "            player.hit(deck.deal_one())\n",
    "            dealer.hit(deck.deal_one())\n",
    "            \n",
    "        print('You have: ')\n",
    "        print_hand(player.hand)\n",
    "        \n",
    "        a_var = 2\n",
    "        while a_var == 2 :\n",
    "            a_var = player_turn(player,dealer,deck, pot)\n",
    "        \n",
    "        dealer_turn(dealer, deck)\n",
    "        print('Dealer has: ')\n",
    "        print_hand(dealer.hand)\n",
    "        \n",
    "        print ('Pot is' + str(pot.amount))\n",
    "    \n",
    "        b_var = compare_hands(player, dealer, a_var)\n",
    "        if b_var == 1:\n",
    "            move_money(player,pot)\n",
    "        else:\n",
    "            move_money(dealer,pot)\n",
    "        print('You now have: ' + str(player.bankroll))\n",
    "        \n",
    "        reset_hands(player,dealer,deck)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting bankroll? 300\n",
      "Amount to bet? 10\n",
      "Pot is 20\n",
      "You have: \n",
      "Ace of diamonds\n",
      "2 of hearts\n",
      "6 of spades\n",
      "10 of diamonds\n",
      "9 of spades\n",
      "Hit(h), stand(s), or raise(r)? s\n",
      "Dealer has: \n",
      "5 of spades\n",
      "2 of spades\n",
      "Jack of hearts\n",
      "3 of hearts\n",
      "Ace of hearts\n",
      "Pot is20\n",
      "You win! \n",
      "You now have: 310\n",
      "Amount to bet? 30\n",
      "Pot is 60\n",
      "You have: \n",
      "3 of clubs\n",
      "3 of diamonds\n",
      "Hit(h), stand(s), or raise(r)? h\n",
      "You have: \n",
      "3 of clubs\n",
      "3 of diamonds\n",
      "2 of diamonds\n",
      "Hit(h), stand(s), or raise(r)? h\n",
      "You have: \n",
      "3 of clubs\n",
      "3 of diamonds\n",
      "2 of diamonds\n",
      "10 of clubs\n",
      "Hit(h), stand(s), or raise(r)? s\n",
      "Dealer has: \n",
      "4 of diamonds\n",
      "Jack of clubs\n",
      "Queen of spades\n",
      "Pot is60\n",
      "Dealer bust. You win! \n",
      "You now have: 340\n",
      "Amount to bet? 10\n",
      "Pot is 20\n",
      "You have: \n",
      "7 of diamonds\n",
      "8 of hearts\n",
      "Hit(h), stand(s), or raise(r)? h\n",
      "You have: \n",
      "7 of diamonds\n",
      "8 of hearts\n",
      "2 of clubs\n",
      "Hit(h), stand(s), or raise(r)? h\n",
      "You have: \n",
      "7 of diamonds\n",
      "8 of hearts\n",
      "2 of clubs\n",
      "7 of spades\n",
      "You bust! You lose.\n",
      "Dealer has: \n",
      "8 of diamonds\n",
      "8 of spades\n",
      "King of clubs\n",
      "Pot is20\n",
      "You now have: 330\n",
      "Amount to bet? -1\n"
     ]
    }
   ],
   "source": [
    "play_game()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
